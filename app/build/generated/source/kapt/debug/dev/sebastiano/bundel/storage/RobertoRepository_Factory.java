// Generated by Dagger (https://dagger.dev).
package dev.sebastiano.bundel.storage;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RobertoRepository_Factory implements Factory<DataRepository> {
  private final Provider<Database> databaseProvider;

  private final Provider<ImagesStorage> imagesStorageProvider;

  public RobertoRepository_Factory(Provider<Database> databaseProvider,
      Provider<ImagesStorage> imagesStorageProvider) {
    this.databaseProvider = databaseProvider;
    this.imagesStorageProvider = imagesStorageProvider;
  }

  @Override
  public DataRepository get() {
    return newInstance(databaseProvider.get(), imagesStorageProvider.get());
  }

  public static RobertoRepository_Factory create(Provider<Database> databaseProvider,
      Provider<ImagesStorage> imagesStorageProvider) {
    return new RobertoRepository_Factory(databaseProvider, imagesStorageProvider);
  }

  public static DataRepository newInstance(
      Database database,
      ImagesStorage imagesStorage) {
    return new DataRepository(database, imagesStorage);
  }
}
